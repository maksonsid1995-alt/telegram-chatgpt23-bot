import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated
from openai import AsyncOpenAI
from tenacity import retry, stop_after_attempt, wait_fixed

# ---------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", 10000))

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ Environment Variables")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://telegram-chatgpt23-bot.onrender.com{WEBHOOK_PATH}"

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ----------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------
def split_message(text: str, limit: int = 4000):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è."""
    return [text[i:i+limit] for i in range(0, len(text), limit)]

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
async def get_openai_response(prompt: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    response = await openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ----------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_name = message.from_user.full_name or "–¥—Ä—É–≥"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø –±–æ—Ç —Å ChatGPT. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî "
        "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –≤–µ–∂–ª–∏–≤–æ. ü§ñ"
    )
    await message.answer(text)

@dp.chat_member()
async def greet_new_user(event: ChatMemberUpdated):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ."""
    if event.new_chat_member.status == "member":
        user = event.new_chat_member.user
        await bot.send_message(
            event.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! "
            f"–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –ø–æ–º–æ–≥–∞—Ç—å üòâ"
        )

@dp.message()
async def handle_message(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT."""
    try:
        user_text = message.text.strip()
        if not user_text:
            return await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å üôÇ")

        reply = await get_openai_response(user_text)

        for part in split_message(reply):
            await message.answer(part)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

# ---------- WEBHOOK-–°–ï–†–í–ï–† ----------
async def on_startup(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

async def run_webhook():
    """–ó–∞–ø—É—Å–∫ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥ Render."""
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, dp.resolve_event(Update=types.Update))
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(run_webhook())