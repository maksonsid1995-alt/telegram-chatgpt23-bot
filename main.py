import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from openai import AsyncOpenAI

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", 10000))

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ Environment Variables")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://telegram-chatgpt23-bot.onrender.com{WEBHOOK_PATH}"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API (–∞–Ω–∞–ª–æ–≥ OpenAI)
openai_client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENAI_API_KEY")
)

# === –£—Ç–∏–ª–∏—Ç—ã ===
def split_message(text, limit=4000):
    return [text[i:i + limit] for i in range(0, len(text), limit)]

# === OpenRouter-–∑–∞–ø—Ä–æ—Å ===
async def get_openai_response(prompt: str) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]],
        resize_keyboard=True
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
        "–Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ OpenRouter (ChatGPT-–º–æ–¥–µ–ª—å). –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É.",
        reply_markup=keyboard
    )

async def message_handler(message: types.Message):
    await message.answer("‚åõ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    reply = await get_openai_response(message.text)
    for chunk in split_message(reply):
        await message.answer(chunk)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
dp.message.register(start_handler, Command("start"))
dp.message.register(message_handler)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä ===
async def handle(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.process_update(update)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return web.Response()

async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("üßπ Webhook —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_shutdown)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
