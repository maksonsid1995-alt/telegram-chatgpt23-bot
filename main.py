import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import openai

# ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get("PORT", 10000))

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ Environment Variables")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://telegram-chatgpt23-bot.onrender.com{WEBHOOK_PATH}"

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
openai.api_key = OPENAI_API_KEY
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ===== –§–£–ù–ö–¶–ò–ò =====
def split_message(text, limit=4000):
    return [text[i:i+limit] for i in range(0, len(text), limit)]

async def get_openai_response(prompt: str):
    response = await openai.ChatCompletion.acreate(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message["content"]

# ===== –ö–ù–û–ü–ö–ê –°–¢–ê–†–¢ =====
@dp.message()
async def welcome(message: types.Message):
    if message.text.lower() in ["/start", "start", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"]:
        user_name = message.from_user.full_name
        greeting = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
            "–Ø –±–æ—Ç —Å ChatGPT. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, "
            "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. üòä"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°—Ç–∞—Ä—Ç")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(greeting, reply_markup=keyboard)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message()
async def chatgpt_reply(message: types.Message):
    if message.text.lower() in ["—Å—Ç–∞—Ä—Ç", "/start"]:
        return
    try:
        text = await get_openai_response(message.text)
        for chunk in split_message(text):
            await message.answer(chunk)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"OpenAI error: {e}")

# ===== ROOT –û–ë–†–ê–ë–û–¢–ß–ò–ö =====
async def root_handler(request):
    return web.Response(text="ü§ñ Telegram ChatGPT –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram.", content_type="text/plain")

# ===== WEBHOOK =====
async def on_startup():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown():
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø—Ä–∏ shutdown")

async def main():
    # –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    app.router.add_get("/", root_handler)

    await on_startup()
    await dp.start_webhook(
        webhook_path=WEBHOOK_PATH,
        host="0.0.0.0",
        port=PORT,
        bot=bot,
        on_shutdown=on_shutdown
    )
    # –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {PORT}")

if __name__ == "__main__":
    asyncio.run(main())